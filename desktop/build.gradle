apply plugin: "java-library"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.unlucky.main.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../android/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

// Create a runnable fat JAR with dependencies and assets
task dist(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output)
    from({ configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } })
    from(files(project.assetsDir))
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

assemble.dependsOn dist


eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}